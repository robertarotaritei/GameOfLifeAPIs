version: 2.1

executors:
  docker-publisher:
    environment:
      ACTIVE_GAMES_NAME: robertaro/game-of-life-active-games-api
      GAME_HISTORY_NAME: robertaro/gameof-life-game-history-api
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:
  build-and-test-active-games-api:
    docker: 
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "ActiveGamesAPI/ActiveGamesAPI/ActiveGamesAPI.csproj" }}
      - run: cd ActiveGamesAPI; dotnet restore
      - save_cache:
          paths:
            - C:\Users\circleci\.nuget\packages
          key: dotnet-packages-v1-{{ checksum "ActiveGamesAPI/ActiveGamesAPI/ActiveGamesAPI.csproj" }}
      - run: cd ActiveGamesAPI; dotnet build --configuration Release
      - run: cd ActiveGamesAPI; dotnet test -v n --results-directory:test_results --collect:"Code Coverage"
      - store_artifacts:
          path: ActiveGamesAPI
  
  publish-latest-active-games-api:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run: |
            cd ActiveGamesAPI && docker build -t $ACTIVE_GAMES_NAME:latest .
      - run: docker save -o image.tar $ACTIVE_GAMES_NAME
      - run: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $ACTIVE_GAMES_NAME:latest
  
  build-and-test-game-history-api:
    docker: 
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "GameHistoryAPI/GameHistoryAPI/GameHistoryAPI.csproj" }}
      - run: cd GameHistoryAPI; dotnet restore
      - save_cache:
          paths:
            - C:\Users\circleci\.nuget\packages
          key: dotnet-packages-v1-{{ checksum "GameHistoryAPI/GameHistoryAPI/GameHistoryAPI.csproj" }}
      - run: cd GameHistoryAPI; dotnet build --configuration Release
      - run: cd GameHistoryAPI; dotnet test -v n --results-directory:test_results --collect:"Code Coverage"
      - store_artifacts:
          path: GameHistoryAPI
  
  publish-latest-game-history-api:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run: |
            cd GameHistoryAPI && docker build -t $GAME_HISTORY_NAME:latest .
      - run: docker save -o image.tar $GAME_HISTORY_NAME
      - run: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $GAME_HISTORY_NAME:latest
            
  build-user-api:
    docker: 
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "UserAPI/UserAPI/UserAPI.csproj" }}
      - run: cd UserAPI; dotnet restore
      - save_cache:
          paths:
            - C:\Users\circleci\.nuget\packages
          key: dotnet-packages-v1-{{ checksum "UserAPI/UserAPI/UserAPI.csproj" }}
      - run: cd UserAPI; dotnet build --configuration Release
      - store_artifacts:
          path: UserAPI
  test-user-api:
    docker: 
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
      - checkout
      - run: cd UserAPI; dotnet test -v n --results-directory:test_results --collect:"Code Coverage"
      - store_test_results:
          path: UserAPI\test_results

workflows:
  build_and_test:
    jobs:
      - build-and-test-active-games-api:
          filters:
            branches:
              only: master
      - publish-latest-active-games-api:
          context: Docker
          filters:
            branches:
              only: master
          requires:
            - build-and-test-active-games-api
      - build-and-test-game-history-api:
          filters:
            branches:
              only: masters
      - publish-latest-game-history-api:
          context: Docker
          filters:
            branches:
              only: master
          requires:
            - build-and-test-game-history-api
      - build-user-api:
          filters:
            branches:
              only: master
      - test-user-api:
          filters:
            branches:
              only: master
          requires:
            - build-user-api